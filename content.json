{"meta":{"title":"Forever","subtitle":"things change","description":null,"author":"Aranonoa007","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-05-16T15:23:47.000Z","updated":"2017-05-16T15:24:16.663Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaWeb路径问题总结","slug":"JavaWeb路径问题总结","date":"2017-05-17T12:17:47.000Z","updated":"2017-05-16T15:02:38.388Z","comments":true,"path":"2017/05/17/JavaWeb路径问题总结/","link":"","permalink":"http://yoursite.com/2017/05/17/JavaWeb路径问题总结/","excerpt":"","text":"这几天开发的过程中遇到路径相关的问题，具体的讲包括js和css加载不出来，调试之后发现根本没有调用到，应该是路径的问题；还有一些是前后端交互的一些路径问题，在此做个总结，希望有所帮助。 相对路径和绝对路径的概念 绝对路径：url地址以“/”开头 相对路径：url地址不以“/”开头 根目录有个项目noa1,项目下有login.html。如果想要访问login页面，则浏览器的地址是：http://localhost:8080/noa1/login.html。 根目录常用有以下两种： web站点根目录：http://localhost:8080/ 应用程序的根目录：http://localhost:8080/noa1/ request.getRequestDispatcher和response.sendRedirectrequest.getRequestDispatcher(url).forward(request, response);转发，又叫服务器跳转，转发时浏览器的地址讲不会变化，客户端发送请求给服务器，服务器返回一次相应。因为是服务器跳转，所以根目录是当前应用程序根目录。response.sendRedirect重定向，又叫浏览器跳转，客户端发送请求给服务器，服务器会相应一个地址给客户端，客户端根据这个地址再次发送请求，服务器做出相应。也就是说浏览器跳转是两个请求，两个相应。由于是浏览器跳转，所以根目录是web站点的根目录。 假设noa1项目下有文件夹a、文件夹b，文件夹a下有a.html，文件夹b下有b.html。从a.html到b.html两种方法： 转发，由于是服务器跳转，根目录是当前项目。所以url不需要带项目名称。相对路径：../b/b.html，绝对路径：/b/b.html。从a.html转发到b.html时，浏览器地址不变，所以b.html的外部样式引用要按照a.html的路径来。 重定向，由于是浏览器跳转，根目录是web站点。所以url需要带项目名称。相对路径：../b/b.html，转发和重定向的相对路径都是一样的，服务器会根据a.html的位置和相对地址找到b.html，在修改相应的地址信息之后发送url给浏览器，浏览器会进行第二次请求。绝对路径：/noa1/b/b.html，使用绝对路径时，服务器会根据web站点根目录和绝对路径直接拼接成url地址，发送给浏览器。 web.xml中的路径问题web.xml中一般是绝对路径web.xml是描述项目部署的相关信息的，所以web.xml的根目录是当前应用程序的根目录 1234 &lt;servlet-mapping&gt; &lt;servlet-name&gt;a1&lt;/servlet-name&gt; &lt;url-pattern&gt;/a1&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 项目名称：noa1这个servlet会拦截http://localhost:8080/noa1/a1的请求 href=’’和action=’’的url根目录 &lt;form action=&quot;/xxx&quot;&gt;&lt;/form&gt;和&lt;a href=&quot;/xxx&quot;&gt;&lt;/a&gt;中的根目录都是web站点的根目录。","categories":[],"tags":[{"name":"1","slug":"1","permalink":"http://yoursite.com/tags/1/"},{"name":"2","slug":"2","permalink":"http://yoursite.com/tags/2/"},{"name":"3","slug":"3","permalink":"http://yoursite.com/tags/3/"}]},{"title":"关于多态的理解","slug":"关于多态的理解","date":"2017-05-16T12:17:47.000Z","updated":"2017-05-16T15:06:47.697Z","comments":true,"path":"2017/05/16/关于多态的理解/","link":"","permalink":"http://yoursite.com/2017/05/16/关于多态的理解/","excerpt":"","text":"举个简单的例子好好体会体会…… 假设有一个类，叫鸟类，拥有属性翅膀，拥有方法鸣叫。 1234567public class Bird&#123; private Wing wing;//属性：翅膀 //方法：鸣叫 public void moo()&#123; System.out.println(\"鸟的叫声\"); &#125;&#125; 鸟类封装了属性翅膀和鸣叫的方法。另外两个类都继承并重写了moo方法，分别是鹦鹉和麻雀。 鹦鹉类： 12345public class Parrot extends Bird&#123; public void moo()&#123; System.out.println(\"鹦鹉的叫声\"); &#125;&#125; 麻雀类： 12345public class Sparrow extends Bird&#123; public void moo()&#123; System.out.println(\"麻雀的叫声\"); &#125;&#125; 这两个子类分别重写了鸟类的moo()方法这个时候，有个女人想听鸟的叫声。于是有个Women类，听鸟叫是Women的方法。 12345public class Women&#123; public void listen()&#123; bird.moo(); &#125;&#125; 假设现在，这个女人想听麻雀的叫声，你就必须在listen()写：Sparrow.moo();如果这个女的想听鹦鹉的叫声，你也要在listen()写：Parrot.moo();这要实现起来非常麻烦，必须为每个鸟类单独写一个moo()方法放在listen()方法中。 要是有多态就简单许多，这个女人不是想听鸟叫吗，直接把鸟扔给她，然后让鸟叫。 123public void listen(Bird bird)&#123; bird.moo();&#125; 多态实现了动态的绑定无论今后Women想听什么鸟的叫声，只需要新增相应的鸟类，不需要修改Women类的方法。总的来说，多态让程序有了更好的拓展性。","categories":[],"tags":[{"name":"1","slug":"1","permalink":"http://yoursite.com/tags/1/"},{"name":"2","slug":"2","permalink":"http://yoursite.com/tags/2/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-16T12:08:30.713Z","updated":"2017-05-16T12:14:28.590Z","comments":true,"path":"2017/05/16/hello-world/","link":"","permalink":"http://yoursite.com/2017/05/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}